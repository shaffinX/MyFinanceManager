import jsPDF from "jspdf";
import autoTable from "jspdf-autotable";

export default async function generateReport(
  pdfcheck,
  excelcheck,
  csvcheck,
  type,
  date,
  savingsList,
  budgetList,
  expenseList
) {
  function escapeCSV(val) {
    if (typeof val === 'string' && (val.includes(',') || val.includes('"'))) {
      return `"${val.replace(/"/g, '""')}"`;
    }
    return val;
  }

  function downloadBlob(blob, filename) {
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = filename;
    document.body.appendChild(a);
    a.click();
    setTimeout(() => {
      document.body.removeChild(a);
      URL.revokeObjectURL(url);
    }, 200);
  }

  let data = [];
  let columns = [];
  let title = '';
  let filename = '';

  if (type === 'budget') {
    data = date === 'all' ? budgetList : budgetList.filter(item => item.period === date);
    columns = [
      { header: 'Category', dataKey: 'category' },
      { header: 'Amount', dataKey: 'amount' },
      { header: 'Period', dataKey: 'period' }
    ];
    title = `Budget Report (${date})`;
    filename = `budget_report_${date}`;
  } else if (type === 'savings') {
    data = savingsList;
    columns = [
      { header: 'Month', dataKey: 'month' },
      { header: 'Savings', dataKey: 'savings' }
    ];
    title = `Savings Report`;
    filename = `savings_report`;
  } else if (type === 'expense') {
    if (date === 'all') {
      data = expenseList;
    } else if (date === 'day') {
      const today = new Date().toISOString().split('T')[0];
      data = expenseList.filter(item => item.date === today);
    } else if (date === 'week') {
      const now = new Date();
      const first = now.getDate() - now.getDay();
      const last = first + 6;
      const weekStart = new Date(now.setDate(first));
      const weekEnd = new Date(now.setDate(last));
      data = expenseList.filter(item => {
        const d = new Date(item.date);
        return d >= weekStart && d <= weekEnd;
      });
    } else if (date === 'month') {
      const now = new Date();
      const month = now.getMonth();
      const year = now.getFullYear();
      data = expenseList.filter(item => {
        const d = new Date(item.date);
        return d.getMonth() === month && d.getFullYear() === year;
      });
    }
    columns = [
      { header: 'Title', dataKey: 'title' },
      { header: 'Amount', dataKey: 'amount' },
      { header: 'Category', dataKey: 'category' },
      { header: 'Date', dataKey: 'date' }
    ];
    title = `Expense Report (${date})`;
    filename = `expense_report_${date}`;
  }

  // PDF
  if (pdfcheck) {
    const doc = new jsPDF({
      orientation: 'portrait',
      unit: 'pt',
      format: 'a4'
    });

    // Header
    doc.setFillColor(52, 152, 219);
    doc.rect(0, 0, doc.internal.pageSize.getWidth(), 60, 'F');
    doc.setFontSize(22);
    doc.setTextColor(255, 255, 255);
    doc.text(title, 40, 40);

    doc.setFontSize(12);
    doc.setTextColor(100, 100, 100);
    doc.text(`Generated on: ${new Date().toLocaleString()}`, 40, 70);

    // Table
    const tableData = data.map(item => {
      const row = {};
      columns.forEach(col => {
        row[col.header] = item[col.dataKey];
      });
      return row;
    });

    let total = null;
    if (type === 'budget' || type === 'expense' || type === 'savings') {
      const key = type === 'savings' ? 'savings' : 'amount';
      total = data.reduce((sum, item) => sum + (Number(item[key]) || 0), 0);
    }

    autoTable(doc, {
      head: [columns.map(c => c.header)],
      body: tableData.map(row => columns.map(col => row[col.header])),
      startY: 90,
      theme: 'striped',
      styles: {
        fontSize: 11,
        cellPadding: 6,
        halign: 'left',
        valign: 'middle'
      },
      headStyles: {
        fillColor: [52, 152, 219],
        textColor: 255,
        fontStyle: 'bold'
      },
      foot: total !== null ? [
        columns.map((col, idx) => idx === 0 ? 'Total' : (idx === 1 ? total : ''))
      ] : []
    });

    // Footer
    doc.setFontSize(9);
    doc.setTextColor(150, 150, 150);
    doc.text(
      'This report was generated by your finance tracker.',
      40,
      doc.internal.pageSize.getHeight() - 30
    );

    doc.save(`${filename}.pdf`);
    return;
  }

  // CSV/Excel
  if (csvcheck || excelcheck) {
    const header = columns.map(col => col.header).join(',');
    const rows = data.map(item =>
      columns.map(col => escapeCSV(item[col.dataKey])).join(',')
    );
    if (type === 'budget' || type === 'expense' || type === 'savings') {
      const key = type === 'savings' ? 'savings' : 'amount';
      const total = data.reduce((sum, item) => sum + (Number(item[key]) || 0), 0);
      const totalRow = columns.map((col, idx) =>
        idx === 0 ? 'Total' : (idx === 1 ? total : '')
      ).join(',');
      rows.push(totalRow);
    }
    const csv = [header, ...rows].join('\r\n');
    const blob = new Blob([csv], {
      type: csvcheck
        ? 'text/csv'
        : 'application/vnd.ms-excel'
    });
    const ext = csvcheck ? 'csv' : 'xls';
    downloadBlob(blob, `${filename}.${ext}`);
    return;
  }

  alert('No output format selected!');
}